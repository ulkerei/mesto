(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._baseUrl=e.baseUrl,this._headers=e.headers}var n,r;return n=t,(r=[{key:"_check",value:function(e){return e.ok?e.json():Promise.reject("Ошибка ".concat(e.status))}},{key:"getProfileInfo",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/users/me"),{method:"GET",headers:this._headers}).then((function(t){return e._check(t)}))}},{key:"getInitialCards",value:function(){var e=this;return fetch("".concat(this._baseUrl,"/cards"),{method:"GET",headers:this._headers}).then((function(t){return e._check(t)}))}},{key:"setUserInfo",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.job,avatar:e.avatar})}).then((function(e){return t._check(e)}))}},{key:"postNewCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.place,link:e.link})}).then((function(e){return t._check(e)}))}},{key:"deleteOwnersCard",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return t._check(e)}))}},{key:"like",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then((function(e){return t._check(e)}))}},{key:"unlike",value:function(e){var t=this;return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then((function(e){return t._check(e)}))}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t,n,r,o,i,u){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._place=t.place||t.name,this._link=t.link,this._likes=t.likes||[],this.id=t._id,this._owner=t.owner,this._self=n,this._selector=r,this._template=document.querySelector(r).content,this._element=this._template.querySelector(".cards__element").cloneNode(!0),this._like=this._element.querySelector(".cards__like"),this._counter=this._element.querySelector(".cards__likes-counter"),this._del=this._element.querySelector(".cards__delete"),this._view=this._element.querySelector(".cards__image"),this._handelView=o,this._openDeletePopup=i,this._handelLike=u}var t,r;return t=e,(r=[{key:"likeCard",value:function(){this._like.classList.toggle("cards__like_state_active")}},{key:"updateCounter",value:function(e){this._counter.textContent=e}},{key:"isLiked",value:function(){return this._like.classList.contains("cards__like_state_active")}},{key:"removeCard",value:function(){this._element.remove(),this._element=null}},{key:"_setEventListeners",value:function(){var e=this;this._view.addEventListener("click",(function(){return e._handelView(e._place,e._link)})),this._like.addEventListener("click",(function(){return e._handelLike(e)})),this._del.addEventListener("click",(function(){return e._openDeletePopup(e)}))}},{key:"createCard",value:function(){var e=this;return this._view.src=this._link,this._view.alt=this._place,this._element.querySelector(".cards__place").textContent=this._place,this._counter.textContent=this._likes.length,this._owner._id!==this._self&&this._del.classList.add("cards__delete_hidden"),this._likes.some((function(t){return t._id===e._self}))&&this._like.classList.add("cards__like_state_active"),this._setEventListeners(),this._element}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var i=function(){function e(t,n){var r,o,i=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o=function(e){e.validity.valid?i._hideInputError(e):i._showInputError(e,e.validationMessage)},(r="_checkValidity")in this?Object.defineProperty(this,r,{value:o,enumerable:!0,configurable:!0,writable:!0}):this[r]=o,this._formSelector=t.formSelector,this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inputErrorClass=t.inputErrorClass,this._errorActiveClass=t.errorActiveClass,this._errorTypeTemplate=t.errorTypeTemplate,this._element=n,this._inputList=Array.from(this._element.querySelectorAll(this._inputSelector))}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e,t){this._errorElement=this._element.querySelector("".concat(this._errorTypeTemplate).concat(e.id)),e.classList.add(this._inputErrorClass),this._errorElement.textContent=t,this._errorElement.classList.add(this._errorActiveClass)}},{key:"_hideInputError",value:function(e){this._errorElement=this._element.querySelector("".concat(this._errorTypeTemplate).concat(e.id)),e.classList.remove(this._inputErrorClass),this._errorElement.classList.remove(this._errorActiveClass),this._errorElement.textContent=""}},{key:"_hasInvalidInput",value:function(){return this._inputList.some((function(e){return!e.validity.valid}))}},{key:"_toggleButtonState",value:function(){this._hasInvalidInput()?this._buttonElement.setAttribute("disabled",!0):this._buttonElement.removeAttribute("disabled")}},{key:"_setEventListeners",value:function(){var e=this;this._inputList.forEach((function(t){t.addEventListener("input",(function(){e._checkValidity(t),e._toggleButtonState()}))}))}},{key:"inactivateSubmitButton",value:function(){this._element.querySelector(".popup__button").setAttribute("disabled",!0)}},{key:"resetValidation",value:function(){var e=this;this._toggleButtonState(),this._inputList.forEach((function(t){e._hideInputError(t)}))}},{key:"enableValidation",value:function(){this._buttonElement=this._element.querySelector(this._submitButtonSelector),this._toggleButtonState(),this._setEventListeners()}}])&&o(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var c=function(){function e(t,n){var r=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._renderer=r,this._target=document.querySelector(n)}var t,n;return t=e,(n=[{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t._renderer(e)}))}},{key:"placeItem",value:function(e,t){t?this._target.append(e):this._target.prepend(e)}}])&&u(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this),this._button=this._popup.querySelector(".popup__button")}var t,n;return t=e,(n=[{key:"openPopup",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}},{key:"closePopup",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}},{key:"_handleEscClose",value:function(e){"Escape"===e.key&&this.closePopup()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("click",(function(t){(t.target.classList.contains("popup__close-x")||t.target.classList.contains("popup__overlay"))&&e.closePopup()}))}}])&&a(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function l(e){return l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l(e)}function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function f(){return f="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=h(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},f.apply(this,arguments)}function h(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=d(e)););return e}function _(e,t){return _=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},_(e,t)}function y(e,t){if(t&&("object"===l(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function d(e){return d=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},d(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&_(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=d(r);if(o){var n=d(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return y(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._viewImage=t._popup.querySelector(".popup__view-image"),t._viewLocation=t._popup.querySelector(".popup__view-location"),t}return t=u,(n=[{key:"openPopup",value:function(e,t){this._viewImage.src=t,this._viewImage.alt=e,this._viewLocation.textContent=e,f(d(u.prototype),"openPopup",this).call(this)}}])&&p(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(s);function b(e){return b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},b(e)}function m(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function w(){return w="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=k(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},w.apply(this,arguments)}function k(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=S(e)););return e}function g(e,t){return g=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},g(e,t)}function E(e,t){if(t&&("object"===b(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function S(e){return S=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},S(e)}var O=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&g(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=S(r);if(o){var n=S(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return E(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._handleFormSubmit=t,n._form=n._popup.querySelector(".popup__form"),n._inputs=Array.from(n._form.querySelectorAll(".popup__input")),n}return t=u,(n=[{key:"_getInputValues",value:function(){var e={};return this._inputs.forEach((function(t){e[t.name]=t.value})),e}},{key:"setEventListeners",value:function(){var e=this;w(S(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault();var n=e._getInputValues();e._handleFormSubmit(n)}))}},{key:"closePopup",value:function(){w(S(u.prototype),"closePopup",this).call(this),this._form.reset()}},{key:"showLoading",value:function(e){e?this._button.textContent="Сохранение...":this._popup.classList.contains("popup_type_add")?this._button.textContent="Создать":this._button.textContent="Сохранить"}}])&&m(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(s);function P(e){return P="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},P(e)}function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function L(){return L="undefined"!=typeof Reflect&&Reflect.get?Reflect.get.bind():function(e,t,n){var r=C(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},L.apply(this,arguments)}function C(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=q(e)););return e}function I(e,t){return I=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},I(e,t)}function T(e,t){if(t&&("object"===P(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function q(e){return q=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},q(e)}var R=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&I(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=q(r);if(o){var n=q(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return T(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._handleFormSubmit=t,n._form=n._popup.querySelector(".popup__form"),n}return t=u,(n=[{key:"openPopup",value:function(e){this._element=e,L(q(u.prototype),"openPopup",this).call(this)}},{key:"setEventListeners",value:function(){var e=this;L(q(u.prototype),"setEventListeners",this).call(this),this._form.addEventListener("submit",(function(t){t.preventDefault(),e._handleSubmit()}))}},{key:"setSubmit",value:function(e){this._handleSubmit=e}}])&&j(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(s);function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var x=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(t.name),this._job=document.querySelector(t.job),this._avatar=document.querySelector(t.avatar)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return this._info={name:this._name.textContent,job:this._job.textContent},this._info}},{key:"setUserInfo",value:function(e){this._name.textContent=e.name,this._job.textContent=e.job||e.about,this._id=e._id,this._avatar.style.backgroundImage="url(".concat(e.avatar,")")}}])&&U(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function A(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var B={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inputErrorClass:"popup__input_type_error",errorActiveClass:"popup__input-error_active",errorTypeTemplate:".popup__input-error_type_"},V=document.querySelector(".popup__input_type_name"),D=document.querySelector(".popup__input_type_job"),N=document.querySelector(".profile__button_type_add"),F=document.querySelector(".profile__button_type_edit"),G=document.querySelector(".profile__button_type_edit-avatar"),J="#cards__element",M=document.querySelector(".popup__form_type_add"),z=document.querySelector(".popup__form_type_edit"),H=document.querySelector(".popup__form_type_avatar"),$=new t({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-48",headers:{authorization:"8363e0f5-2c67-4395-bf21-4f6fde47b262","Content-Type":"application/json"}}),K=new c({renderer:function(e){var t=new r(e,re._id,J,(function(){return ue(e.name,e.link)}),oe,ie);K.placeItem(t.createCard(),!0)}},".cards"),Q=new i(B,M),W=new i(B,z),X=new i(B,H),Y=new v(".popup_type_viewer"),Z=new R(".popup_type_confirm"),ee=new O(".popup_type_add",(function(e){ee.showLoading(!0),$.postNewCard(e).then((function(e){var t=new r(e,re._id,J,(function(){return ue(e.place,e.link)}),oe,ie);K.placeItem(t.createCard(),!1),ee.closePopup()})).catch((function(e){console.log(e)})).finally((function(){return ee.showLoading(!1)}))})),te=new O(".popup_type_edit",(function(e){te.showLoading(!0),$.setUserInfo(e).then((function(e){te.closePopup(),re.setUserInfo(e)})).catch((function(e){console.log(e)})).finally((function(){return te.showLoading(!1)}))})),ne=new O(".popup_type_avatar",(function(e){ne.showLoading(!0),$.setUserInfo(e).then((function(e){ne.closePopup(),re.setUserInfo(e)})).catch((function(e){console.log(e)})).finally((function(){return ne.showLoading(!1)}))})),re=new x({name:".profile__name",job:".profile__job",avatar:".profile__avatar"});function oe(e){Z.openPopup(),Z.setSubmit((function(){$.deleteOwnersCard(e.id).then((function(){e.removeCard(),Z.closePopup()})).catch((function(e){console.log(e)}))}))}function ie(e){e.isLiked()?$.unlike(e.id).then((function(t){e.updateCounter(t.likes.length),e.likeCard()})).catch((function(e){console.log(e)})):$.like(e.id).then((function(t){e.updateCounter(t.likes.length),e.likeCard()})).catch((function(e){console.log(e)}))}function ue(e,t){Y.openPopup(e,t)}Promise.all([$.getProfileInfo(),$.getInitialCards()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],u=!0,c=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{u||null==n.return||n.return()}finally{if(c)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return A(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?A(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];re.setUserInfo(o),K.renderItems(i)})).catch((function(e){console.log(e)})),W.enableValidation(),Q.enableValidation(),X.enableValidation(),Y.setEventListeners(),ee.setEventListeners(),te.setEventListeners(),ne.setEventListeners(),Z.setEventListeners(),F.addEventListener("click",(function(){var e=re.getUserInfo();re.setUserInfo(e),V.value=e.name,D.value=e.job,W.resetValidation(),te.openPopup()})),N.addEventListener("click",(function(){Q.resetValidation(),ee.openPopup()})),G.addEventListener("click",(function(){X.resetValidation(),ne.openPopup()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,